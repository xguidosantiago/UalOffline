import os
import scripts.banner as b
import scripts.mainmenu as m
import scripts.colors as C

def printManual():

    b.bannerMan()

    print(f"{C.BOLD}UAL OFFLINE{C.REG} es un sistema creado con programación estructurada en python para gestionar cursos y alumnos de manera local.")
    print("La idea es implementar un ABM utilizando listas que guarden diccionarios, y que esto sea almacenado en archivos JSON como base de datos,") 
    print("asi como para tambien importar y visualizar los registros, modificarlos o eliminarlos. Al mismo tiempo estos JSON se conectan entre si ")
    print("para crear inscripciones de alumnos a cursos, al estilo tabla intermedia de las bases de datos relacionales con cardinalidad muchos a muchos.") 
    print("")
    print("Lógicamente al crear por ejemplo, un nuevo alumno, cargaremos los datos mediante inputs; los mismos se pasarán a un diccionario y sobre este ")
    print("diccionario se hará un append a una lista de alumnos. Luego esta lista será guardada en alumnos.json con la funcion json.dump(), para luego ")
    print("traerlos de manera inversa. Se hará un json.load() del archivo para traer los datos y agregarlos en una lista para visualizarlos. ")
    print("Los mismos se recorrerán con un bucle for. Para eliminarlos usamos la función remove() de la lista. Usando la misma lógica se armó el abm ")
    print("de cursos e inscripciones.")
    print("")
    print(f"{C.BOLD}Funcionamiento:{C.REG}")
    print("")
    print("En primera instancia nos vamos a encontrar con un login, el cual implementa getpass para evitar mostrar la contraseña al tipearla. ")
    print("Esta contraseña se encuentra hasheada en la base de datos con el algoritmo SHA-256 para asegurar que no se pueda visualizar al acceder a la db ")
    print("de usuarios (users.json). Por este motivo, al ingresar la contraseña en el menú de login, primero debe ser hasheada y luego comparada con la que ")
    print("se encuentra almancenada en la base de datos. En caso de coincidir, vamos a poder acceder al menú principal. Caso contrario, se llamará recurisvamente") 
    print("a la funcion de login para volver a ingresar los datos.")
    print("")
    print("Una vez dentro del menú principal nos encontraremos con 3 opciones referidas al ABM: ver cursos, ver alumnos y ver inscripciones. ")
    print("En caso de indicar una opción incorrecta, nos dará error y nos pedirá ingresar nuevamente una de las opciones.")
    print("")
    print(f"{C.BOLD}1. Ver cursos:{C.REG}")
    print("Los cursos están contienen la siguiente estructura de diccionario {id,nombre,fecha_inicio,fecha_fin,eliminado}. ")
    print("El Id se programó para ser autoincremental, es decir que cuando queramos agregar un nuevo curso, verificará el ultimo ID almacenado en la base de datos ")
    print("cursos.json e incrementará este en uno para el nuevo registro. ")
    print("Además, tenemos un atributo ELIMINADO, el cual es un bool para validar que si el curso está eliminado (1) no se muestre en la lista, ")
    print("en caso contrario (0) se mostrará como curso activo. esto se hizo para evitar que se pisen los ID al eliminar un curso, lo cual nos podría traer ")
    print("problemas en las inscripciones. Por tal motivo, al eliminar un curso, no se elimina realmente, sino que se marca como ELIMINADO y se filtra ")
    print("en el listado de cursos activos.")
    print("")
    print("Una vez que ingresamos a este menú, automaticamente nos traerá los cursos activos. debajo del listado podremos hacer 4 opciones: ")
    print("alta de curso, modificar curso, eliminar curso y volver al menu. Tanto modificar curso como eliminar curso realizarán la validación con el ID del curso ")
    print("a editar. En caso de que exista, se realizarán las modificaciones necesarias, de lo contrario nos dará error y solicitará nuevamente los datos.")
    print("")
    print(f"{C.BOLD}2. Ver alumnos:{C.REG}")
    print("Este menú es similar a los cursos; aqui podremos visualizar los alumnos, los cuales se almacenan en diccionarios con la siguiente estructura: ")
    print("{dni,nombre,apellido,fecha_nac,email}.")
    print("En este caso, como validamos a los usuarios por dni, no se generó un ID autoincremental, por lo que vamos a referenciar a la edición de alumno, ")
    print("eliminación o inscripcion a un curso mediante este dato.")
    print("Algo que se agregó en este módulo, para facilitar la edición, es que si queremos editar un alumno y queremos cambiar por ejemplo un solo dato, ")
    print("si presionamos enter sin editar, nos guardará el que estaba previamente almacenado. es decir que si queremos cambiar el apellido, solo debemos ")
    print("completar este dato y dar enter en los siguientes para evitar reescribir nuevamente todos los campos.")
    print("Otra cosa a destacar es que si queremos eliminar un alumno que se encuentra inscripto a algun curso nos dará error, avisnado que no se puede eliminar ")
    print("el mismo ya que se encuentra activamente cursando una materia.")
    print("")
    print(f"{C.BOLD}3. Ver inscripciones:{C.REG}")
    print("El diccionario de datos de las inscripciones es {idCurso,idAlumno}, el cual asocia el id de curso con el dni del alumno a inscribir.")
    print("Al ingresar a las inscripciones primero veremos el listado de cursos y automaticamente nos pedirá el ID del curso para ver las inscripciones actuales. ")
    print("Cuando ingresamos el ID del curso del listado, nos mostrará los alumnos inscriptos en caso de que haya alguno; también nos mostrará el total de ")
    print("inscriptos a curso.")
    print("Debajo de esta información veremos 3 opciones: inscribir alumno, eliminar inscripcion y volver.")
    print("En inscribir alumno nos mostrará el listado de alumnos activos, donde deberemos ingresar el DNI. En caso de que ya esté inscripto, nos dará error ")
    print("y nos solicitará de nuevo el dni. Mismo modo si ingresamos un dni inexistente en la base de datos.")
    print("Para la eliminación, también nos solicitará un DNI y validará que el mismo se encuentre asociado al curso. De caso contrario nos dará error y nos ")
    print("solicitará nuevamente el dato.")
    print("")
    print(f"{C.BOLD}{C.YELLOW}Hecho por Guido Maestrini para Programación II{C.REG}")
    print("")
    input(f"{C.BOLD}Presione Enter para volver{C.REG}")
    m.showmenu()

if "__name__" == "__main__":
    printManual()
